// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  password    String
  phoneNumber String
  isAdmin     Boolean   @default(false)
  addresses   Address[]
  orders      Order[]
}

model Address {
  id     String  @id @default(uuid())
  street String
  city   String
  state  String
  zip    String
  user   User    @relation(fields: [userId], references: [id])
  userId String
  Order  Order[]
}

model Order {
  id              String      @id @default(uuid())
  orderNumber     Int
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  paymentMethod   String
  deliveryAddress Address     @relation(fields: [addressId], references: [id])
  orderConfirm    Boolean     @default(false)
  finishedOrder   Boolean     @default(false)
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  orderItems      OrderItem[]
  addressId       String
}

model Category {
  id         String       @id @default(cuid())
  name       String
  items      MenuItem[]
  CombosItem CombosItem[]
}

model OrderItem {
  id           String    @id @default(uuid())
  quantity     Int
  total        Float
  instructions String?
  order        Order     @relation(fields: [orderId], references: [id])
  orderId      String
  menuItem     MenuItem? @relation(fields: [menuItemId], references: [id])
  menuItemId   String?
  comboId      String?
}

model MenuItem {
  id          String      @id @default(uuid())
  name        String
  price       Float
  description String
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  OrderItem   OrderItem[]
}

model CombosItem {
  id         String   @id @default(uuid())
  burgerId   String?
  drinkId    String?
  dessertId  String?
  sideId     String?
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
}
